using DontTouchKeyboard.Core.Models;

namespace DontTouchKeyboard.Core.Internals;

public static class KeysExtension
{
    public static string? ToVisual(this Keys key, KeyStates states)
    {
        return key switch
        {
            Keys.None => null,
            Keys.LeftButton => null,
            Keys.RightButton => null,
            Keys.Cancel => null,
            Keys.MiddleButton => null,
            Keys.XButton1 => null,
            Keys.XButton2 => null,
            Keys.Clear => null,
            Keys.Back => null,
            Keys.Tab => "Tab",
            Keys.Enter => "Enter",
            Keys.Shift => "Shift",
            Keys.Control => "Ctrl",
            Keys.Menu => "Alt",
            Keys.Pause => "Pause",
            Keys.CapitalLock => "Caps Lock",
            Keys.Kana => null,
            Keys.Junja => null,
            Keys.Final => null,
            Keys.Hanja => null,
            Keys.Escape => "Esc",
            Keys.Convert => null,
            Keys.NonConvert => null,
            Keys.Accept => null,
            Keys.ModeChange => null,
            Keys.Space => null,
            Keys.PageUp => "Page\r\nUp",
            Keys.PageDown => "Page\r\nDown",
            Keys.End => "End",
            Keys.Home => "Home",
            Keys.Left => null,
            Keys.Up => null,
            Keys.Right => null,
            Keys.Down => null,
            Keys.Select => null,
            Keys.Print => "PtrSc",
            Keys.Execute => null,
            Keys.Snapshot => null,
            Keys.Insert => "Insert",
            Keys.Delete => "Delete",
            Keys.Help => null,
            Keys.Number1 => states.IsShiftDown() ? "!" : "1",
            Keys.Number2 => states.IsShiftDown() ? "@" : "2",
            Keys.Number3 => states.IsShiftDown() ? "#" : "3",
            Keys.Number4 => states.IsShiftDown() ? "$" : "4",
            Keys.Number5 => states.IsShiftDown() ? "%" : "5",
            Keys.Number6 => states.IsShiftDown() ? "^" : "6",
            Keys.Number7 => states.IsShiftDown() ? "&" : "7",
            Keys.Number8 => states.IsShiftDown() ? "*" : "8",
            Keys.Number9 => states.IsShiftDown() ? "(" : "9",
            Keys.Number0 => states.IsShiftDown() ? ")" : "0",
            Keys.A => states.IsUpper() ? "A" : "a",
            Keys.B => states.IsUpper() ? "B" : "b",
            Keys.C => states.IsUpper() ? "C" : "c",
            Keys.D => states.IsUpper() ? "D" : "d",
            Keys.E => states.IsUpper() ? "E" : "e",
            Keys.F => states.IsUpper() ? "F" : "f",
            Keys.G => states.IsUpper() ? "G" : "g",
            Keys.H => states.IsUpper() ? "H" : "h",
            Keys.I => states.IsUpper() ? "I" : "i",
            Keys.J => states.IsUpper() ? "J" : "j",
            Keys.K => states.IsUpper() ? "K" : "k",
            Keys.L => states.IsUpper() ? "L" : "l",
            Keys.M => states.IsUpper() ? "M" : "m",
            Keys.N => states.IsUpper() ? "N" : "n",
            Keys.O => states.IsUpper() ? "O" : "o",
            Keys.P => states.IsUpper() ? "P" : "p",
            Keys.Q => states.IsUpper() ? "Q" : "q",
            Keys.R => states.IsUpper() ? "R" : "r",
            Keys.S => states.IsUpper() ? "S" : "s",
            Keys.T => states.IsUpper() ? "T" : "t",
            Keys.U => states.IsUpper() ? "U" : "u",
            Keys.V => states.IsUpper() ? "V" : "v",
            Keys.W => states.IsUpper() ? "W" : "w",
            Keys.X => states.IsUpper() ? "X" : "x",
            Keys.Y => states.IsUpper() ? "Y" : "y",
            Keys.Z => states.IsUpper() ? "Z" : "z",
            Keys.LeftWindows => null,
            Keys.RightWindows => null,
            Keys.Application => null,
            Keys.Sleep => null,
            Keys.NumberPad0 => "0",
            Keys.NumberPad1 => "1",
            Keys.NumberPad2 => "2",
            Keys.NumberPad3 => "3",
            Keys.NumberPad4 => "4",
            Keys.NumberPad5 => "5",
            Keys.NumberPad6 => "6",
            Keys.NumberPad7 => "7",
            Keys.NumberPad8 => "8",
            Keys.NumberPad9 => "9",
            Keys.Multiply => "*",
            Keys.Add => "+",
            Keys.Separator => null,
            Keys.Subtract => "-",
            Keys.Decimal => ".",
            Keys.Divide => "/",
            Keys.F1 => "F1",
            Keys.F2 => "F2",
            Keys.F3 => "F3",
            Keys.F4 => "F4",
            Keys.F5 => "F5",
            Keys.F6 => "F6",
            Keys.F7 => "F7",
            Keys.F8 => "F8",
            Keys.F9 => "F9",
            Keys.F10 => "F10",
            Keys.F11 => "F11",
            Keys.F12 => "F12",
            Keys.F13 => "F13",
            Keys.F14 => "F14",
            Keys.F15 => "F15",
            Keys.F16 => "F16",
            Keys.F17 => "F17",
            Keys.F18 => "F18",
            Keys.F19 => "F19",
            Keys.F20 => "F20",
            Keys.F21 => "F21",
            Keys.F22 => "F22",
            Keys.F23 => "F23",
            Keys.F24 => "F24",
            Keys.NumberKeyLock => "Num\r\nLock",
            Keys.Scroll => "Scroll",
            Keys.LeftShift => "Shift",
            Keys.RightShift => "Shift",
            Keys.LeftControl => "Ctrl",
            Keys.RightControl => "Ctrl",
            Keys.LeftMenu => "Alt",
            Keys.RightMenu => "Alt",
            Keys.OemSemicolon => states.IsShiftDown() ? ":" : ";",
            Keys.OemPlus => states.IsShiftDown() ? "+" : "=",
            Keys.OemComma => states.IsShiftDown() ? "<" : ",",
            Keys.OemMinus => states.IsShiftDown() ? "_" : "-",
            Keys.OemPeriod => states.IsShiftDown() ? ">" : ".",
            Keys.OemQuestion => states.IsShiftDown() ? "?" : "/",
            Keys.OemTilde => states.IsShiftDown() ? "~" : "`",
            Keys.OemOpenBrackets => states.IsShiftDown() ? "{" : "[",
            Keys.OemPipe => states.IsShiftDown() ? "|" : "\\",
            Keys.OemCloseBrackets => states.IsShiftDown() ? "}" : "]",
            Keys.OemQuotes => states.IsShiftDown() ? "\"" : "'",
            _ => null,
        };
    }
}
